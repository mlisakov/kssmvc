<link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
@{
    Layout = "";
}

@using KSS.Models
@model TreeViewModel

@helper TreeView(TreeViewNode node)
{
    if (!node.HasChilds)
    {
        <li>
            <span class="leaf @node.Type" id="@node.Id" title="@node.Name">@node.Name</span>
        </li>
    }
    else
    {
        if (node.Expanded)
        {
            <li data-url='@Url.Action("TreeNodes", "Tree", new {id = node.Id, type = node.Type})'>
                <div class="minus rootArrow"></div>
                <span class="folder hasChilds @node.Type" id="@node.Id" title="@node.Name">@node.Name</span>                
            </li>
            if (node.HasChilds && node.Children != null)
            {
                if (node.Children.All(i => !i.Expanded))
                {
                    <ul class="innerUL innerUL-background">
                        @foreach (TreeViewNode childNode in node.Children)
                        {
                            if (!node.HasChilds)
                            {
                                <li>
                                    <span class="leaf @node.Type" id="@node.Id" title="@node.Name">@node.Name</span>
                                </li>
                            }
                            else
                            {
                                @TreeView(childNode)
                            }
                        }
                    </ul>
                }
                else
                {
                      <ul class="innerUL">
                        @foreach (TreeViewNode childNode in node.Children)
                        {
                            if (!node.HasChilds)
                            {
                                <li>
                                    <span class="leaf @node.Type" id="@node.Id" title="@node.Name">@node.Name</span>
                                </li>
                            }
                            else
                            {
                                @TreeView(childNode)
                            }
                        }
                    </ul>
                }
            }
        }
        else
        {
            <li data-url='@Url.Action("TreeNodes", "Tree", new {id = node.Id, type = node.Type})'>
                <div class="plus rootArrow"></div>
                <span class="folder hasChilds @node.Type" id="@node.Id" title="@node.Name">
                    @node.Name
                </span>
            </li>
        }
    }

    //    </div>
}


<ul class="innerUL">
    @foreach (TreeViewNode rootNode in Model.RootNodes)
    {
        @TreeView(rootNode)
    }
</ul>



<script type="text/javascript">
    $(document).ready(function () {

        $('.innerUL').on('click', function (e) {
            var currentListItem = $(e.target);

            var url = currentListItem.data('url');

            if (url != null) {

                if (!currentListItem.next().hasClass('innerUL')) {

                    //hide background parent UL
                    var list = currentListItem.parent();
                    if (!list.hasClass('rootUL')) {

                        //hide background only if already HAVE background
                        if (list.hasClass('innerUL-background'))
                            list.toggleClass('innerUL-background');
                    }

                    //show minus, hide plus
                    var minus = currentListItem.children('.plus');
                    minus.toggleClass("minus");
                    minus.toggleClass("plus");


                    var treeProgress = $('<img class="treeProgress" src="Images/progress.gif" />');
                    currentListItem.prepend(treeProgress);
                    //currentListItem.append(treeProgress);
                    //load items
                    loadDivisionStates(currentListItem, url);


                    e.stopPropagation();
                } else {

                    $.get(url, function () { });
                   
                    var next = currentListItem.next();

                    //add background to parent UL
                    var list = currentListItem.parent();
                    if (!list.hasClass('rootUL')) {

                        //check if childer have opened li
                        var bodies = list.children('ul .innerUL-background:visible');

                        if (bodies.length == 0)
                            list.toggleClass('innerUL-background');
                        else {
                            if (bodies.length == 1) {

                                if (next.hasClass('innerUL-background') && $(next).is(':visible'))
                                    list.toggleClass('innerUL-background');

                            }
                        }
                    }

                    //hide items
                    next.slideToggle('slow');


                    //show plus, hide minus
                    var minus = currentListItem.children('.minus, .plus');
                    minus.toggleClass("minus");
                    minus.toggleClass("plus");

                    e.stopPropagation();
                }
            }
        });

        function loadDivisionStates(listItem, url) {
            $.get(url, function (data) {
                //                listItem.parent().after(data);

                listItem.after(data);
                listItem.find('.treeProgress').remove();
                listItem.next().addClass('innerUL-background');
            });
        }

    });
</script>