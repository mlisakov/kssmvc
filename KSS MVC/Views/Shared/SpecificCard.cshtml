@{
    Layout = "";
}

@using KSS.Helpers
@using KSS.Server.Entities
@using NLog.Targets
@model KSS.Models.SpecificStaffModel
           

<div class="personCardLayout">
    <p class="paginationArrow" style="">←</p>
    <a class="paginationNavigationLink backLink" style="" data-url="@ViewBag.BackLink">Назад</a>
    


    <div style="margin-top: 10px">
        @if (ViewBag.IsAdmin)
        {
            <p id="removeSpecificStaff" class="personCardJob personCardEdit specificPersonCardJobLabel" style="display: block; margin-bottom: 10px">удалить позицию</p>
        }
        
        <div style="float:left">            
            <img class="personIMG" src="data:image/png;base64, @Model.GetImage()" />            
        </div>


        <div class="aroundPhotoPersonContainer">
            <h5 class="personCardName">
                @Model.SpecificStaff.Position
            </h5>

            @if (Model.RelatedEmployee != null)
            {
                <p class="personName specificRelatedPersonName" >
                    <a class="emploeeLink" data-url='@Url.Action("Index", "Employee", new {id = Model.RelatedEmployee.Id})'>@Model.RelatedEmployee.Name</a>                            
                </p>

                <p class="personCardJob specificPersonCardJobLabel">
                    @{
                        var items = Model.GetEmployeeFullDepartmentName();
                        for (int i = items.Count - 1; i > -1; i--)
                        {
                            if (items[i].ExpirationDate == null)
                            {
                                <a class="personCardDepartmentLink" data-url="@Url.Action("SearchView", "Home", new {id = items[i].Id})"> @items[i].Department</a>
                            }
                            else
                            {
                                <a> @items[i].Department</a>
                            }

                            if (i != 0)
                            {
                                <a> -> </a>
                            }
                        }
                    }
                </p>

                <p class="personCardJob specificPersonCardJobLabel" >@Model.EmployeePositionState.Title</p>

                if (ViewBag.IsAdmin)
                {
                    <p id="removeContactPersonLink" class="personCardJob personCardEdit specificPersonCardJobLabel">удалить контактное лицо</p>
                }
                
            }
            else
            {
                <p class="personCardJob specificPersonCardJobLabel specificRelatedPersonName" >нет контактного лица</p>

                if (ViewBag.IsAdmin)
                {
                    <p id="editContactPersonLink" class="personCardJob personCardEdit specificPersonCardJobLabel">назначить</p>
                }
            }
        </div>

    </div>
    
    @if (ViewBag.IsAdmin)
    {
        <div class="specificCardChangePersonDialog personCardDialog" data-specificID="@Model.SpecificStaff.Id">
            <p class="personCardChangePlaceDialogSimpleLabel">Сотрудник</p>
            <select id="personListForSpecific" class="personCardPersonsComboBox personCardChangePlaceDialogSelect" tabindex="1">
                <option selected="selected" value="@Guid.Empty">не выбран</option>
                
                @foreach (var person in Model.GetPersonsInDivision())
                {
                    <option value="@person.Key">@person.Value</option>
                }
            </select>

            <div class="personCardChangePlaceDialogButtonsContainer">
                <p id="cancelEditPlace" class="personCardEdit personCardCancelEditPlaceButton">отменить</p>
                <input id="savePersonButton" type="button" class="departmentSearchButton personCardSavePlaceDialogButton" value="сохранить" tabindex="7" />
            </div>

        </div>
    }
    
    <br/>
    
    <div class="personCardPlaceContainer" >

        <p class="personCardJobTitle ">Подразделение:</p>
        <p class="personCardJob ">
            <a class=""> @Model.SpecificStaff.DepartmentSpecificState.Name</a>
        </p>

    </div>
    
    
    <div class="personCardPlaceContainer personCardJobMarginTop" style="margin-top: 10px">
        <p class="personCardJobTitle">Местоположение:</p>

        @*        <p class="personCardJob">Россия, Ростовская область, Ростов-на-Дону</p>*@

        @if (Model.SpecificStaffLocation != null)
        {
                <!--в этой только СТРАНА, ОБЛАСТЬ, ГОРОД-->
            <p class="personCardJob">

                @Model.SpecificStaffLocation.Locality.Country, @Model.SpecificStaffLocation.Locality.Region, @Model.SpecificStaffLocation.Locality.Locality1
            </p>

                <!--в этой только УЛИЦА, ДОМ-->
            @*                <p class="personCardJob">ул. Большая Садовая, 49.</p>*@
            <p class="personCardJob">
                @Model.SpecificStaffLocation.Street, @Model.SpecificStaffLocation.Edifice
            </p>
        }
        else
        {
            <p class="personCardJob">-</p>
            <p class="personCardJob"></p>
        }


        <p class="personCardJobTitle ">Номер офиса:</p>

        @if (Model.SpecificStaffPlaces.Any(t => !string.IsNullOrEmpty(t.Office)))
        {
            <p class="personCardJob ">
                @Model.SpecificStaffPlaces.First(t => !string.IsNullOrEmpty(t.Office)).Office
            </p>
        }
        else
        {
            <p class="personCardJob ">-</p>
        }


        @if (ViewBag.IsAdmin)
        {
            <p id="editPlaceLink" class="personCardJob personCardEdit ">редактировать</p>
        }
    </div>


    
    @if (ViewBag.IsAdmin)
    {
        <div class="personCardChangePlaceDialog personCardDialog">
            <p class="personCardChangePlaceDialogSimpleLabel">страна</p>
            <select class="specificCardCountryComboBox personCardChangePlaceDialogSelect" tabindex="1">
                <option selected="selected">Россия</option>
            </select>
            
            <p class="personCardChangePlaceDialogSimpleLabel">Территория</p>
            <select id="specificCardTerritoryComboBoxControl" class="personCardCityComboBox personCardChangePlaceDialogSelect" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.DivisionId.HasValue)
                {
                    foreach (var reg in DBHelper.GetTerritories(Model.DivisionId.Value))
                    {
                        if (Model.SpecificStaffLocation != null && Model.SpecificStaffLocation.TerritoryId.HasValue && Model.SpecificStaffLocation.TerritoryId.Value == reg.Id)
                        {
                            <option value="@reg.Id" selected="selected">@reg.Territory</option>
                            continue;
                        }
                        <option value="@reg.Id">@reg.Territory</option>
                    }
                }
            </select>
        
            <p class="personCardChangePlaceDialogSimpleLabel">регион</p>
            <select id="specificCardRegionComboBoxControl" class="personCardRegionComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="">не выбран</option>
                @if (Model.DivisionId.HasValue)
                {
                    foreach (var reg in DBHelper.GetRegions(Model.DivisionId.Value, Model.SpecificStaffLocation == null ? null : Model.SpecificStaffLocation.TerritoryId))
                    {
                        if (Model.SpecificStaffLocation != null && string.Equals(Model.SpecificStaffLocation.Locality.Region, reg))
                        {
                            <option value="@reg" selected="selected">@reg</option>
                            continue;
                        }
                        <option value="@reg">@reg</option>
                    }
                }

            </select>
        
            <p class="personCardChangePlaceDialogSimpleLabel">населенный пункт</p>
            <select id="specificCardCityComboBoxControl" class="personCardCityComboBox personCardChangePlaceDialogSelect" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.SpecificStaffLocation != null)
                {
                    foreach (var reg in DBHelper.GetLocalities(Model.SpecificStaffLocation.Locality.Country, Model.SpecificStaffLocation.Locality.Region))
                    {
                        if (Model.SpecificStaffLocation != null && string.Equals(Model.SpecificStaffLocation.Locality.Locality1, reg.Value))
                        {
                            <option value="@reg.Key" selected="selected">@reg.Value</option>
                            continue;
                        }
                        <option value="@reg.Key">@reg.Value</option>
                    }
                }
            </select>
        
            <p class="personCardChangePlaceDialogSimpleLabel">улица</p>
            <select id="specificCardStreetComboBoxControl" class="personCardStreetComboBox personCardChangePlaceDialogSelect" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.SpecificStaffLocation != null)
                {
                    foreach (var reg in DBHelper.GetStreets(Model.SpecificStaffLocation.Locality.Id))
                    {
                        if (Model.SpecificStaffLocation != null && Model.SpecificStaffLocation.Street == reg.Value)
                        {
                            <option value="@reg.Key" selected="selected">@reg.Value</option>
                            continue;
                        }
                        <option value="@reg.Key">@reg.Value</option>
                    }
                }
            </select>

            
            <p class="personCardChangePlaceDialogSimpleLabel">дом</p>
            <select id="specificCardHouseComboBoxChange" class="personCardStreetComboBox personCardChangePlaceDialogSelect" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.SpecificStaffLocation != null)
                {
                    foreach (var reg in DBHelper.GetHouses(Model.SpecificStaffLocation.Locality.Id, Model.SpecificStaffLocation.Id))
                    {
                        if (Model.SpecificStaffLocation != null && Model.SpecificStaffLocation.Edifice == reg.Value)
                        {
                            <option value="@reg.Key" selected="selected">@reg.Value</option>
                            continue;
                        }
                        <option value="@reg.Key">@reg.Value</option>
                    }
                }
            </select>


           
            <p class="personCardChangePlaceDialogSimpleLabel personCardChangePlaceDialogHalfLabel">номер корпуса</p>
            <p class="personCardChangePlaceDialogSimpleLabel personCardChangePlaceDialogHalfLabel">номер офиса</p>
        
            
            <select id="specificCardPavilionComboBoxChange" class="personCardStreetComboBox personCardChangePlaceDialogSelect personCardChangePlaceDialogHalfText" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.SpecificStaffLocation != null)
                {
                    foreach (var reg in DBHelper.GetPavillions2(Model.SpecificStaffLocation.Locality.Id, Model.SpecificStaffLocation.Id))
                    {
                        if (Model.SpecificStaffLocation != null && Model.SpecificStaffLocation.Building == reg.Value)
                        {
                            <option value="@reg.Key" selected="selected">@reg.Value</option>
                            continue;
                        }
                        <option value="@reg.Key">@reg.Value</option>
                    }
                }
            </select>


            @if (Model.SpecificStaffLocation != null)
            {
                <input id="specificCardOfficeChange" type="text" class="personCardOfficeNumber personCardChangePlaceDialogText personCardChangePlaceDialogHalfText" tabindex="6" value="@Model.SpecificStaffPlaceWithLocation.Office" />
            }
            else
            {
                <input id="specificCardOfficeChange" type="text" class="personCardOfficeNumber personCardChangePlaceDialogText personCardChangePlaceDialogHalfText" tabindex="6" />
            }

        
            <div class="personCardChangePlaceDialogButtonsContainer">
                <p id="cancelEditPlace" class="personCardEdit personCardCancelEditPlaceButton">отменить</p>
                <input id="savePlaceButton" type="button" class="departmentSearchButton personCardSavePlaceDialogButton" value="сохранить" tabindex="7"/>                    
            </div>

        </div>
    }


    <div class="personCardPlaceContainer">
        <p class="personCardPhonesHeader" style="float:none">ТЕЛЕФОНЫ:</p>
        
        @for (int i = 0; i < Model.SpecificStaffPlaces.Count; i++)
        {
            if (string.IsNullOrEmpty(Model.SpecificStaffPlaces[i].PhoneNumber) || Model.SpecificStaffPlaces[i].PhoneNumber == "_")
            {
                continue;
            }
            <div>
                <p id="phoneType_@i" class="personCardJobTitle">@Model.SpecificStaffPlaces[i].PhoneType.Category:</p>
@*                <p id="phoneNumber_@i" class="personcardJobEdit ">@Model.SpecificStaffPlaces[i].PhoneNumber</p>*@
                <p id="phoneNumber_@i" class="personcardJobEdit ">@Model.ParseNumber(i)</p>
                @if (ViewBag.IsAdmin)
{
                    <p id="editPhoneLink_@i" class="personCardEdit personCardEditPhoneLink" data-placeid="@Model.SpecificStaffPlaces[i].Id" data-phone="@Model.SpecificStaffPlaces[i].PhoneNumber">редактировать</p>
                    <p id="deletePhoneLink_@i" class="personCardEdit personCardDeletePhoneLink" data-url="@Url.Action("DeleteSpecificPhone", "Home", new { specificStaffId = Model.SpecificStaff.Id, specificStaffPlaceId = Model.SpecificStaffPlaces[i].Id })">удалить</p>
                }
                else
                {
                    <p class="personCardEdit personCardEditPhoneLink" style="visibility: hidden">редактировать</p>
                }
            </div>
        }
        @if (ViewBag.IsAdmin)
        {
            <div class="personCardDialog personCardChangePhoneDialog" >
                <p id="personCardChangePhoneDialogPhoneTypeLabel" class="personCardChangePlaceDialogSimpleLabel">
                    тип номера
                </p>
                <input id="personCardChangePhoneTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" />

                <div class="personCardChangePlaceDialogButtonsContainer">
                    <p id="cancelEditPhone" class="personCardEdit personCardCancelEditPlaceButton">отменить</p>
                    <input id="updateSpecificPhoneButton" data-placeid="0" type="button" class="departmentSearchButton personCardSavePlaceDialogButton" value="сохранить" tabindex="7" />
                </div>
            </div>
        }
    </div>
    
    @if (ViewBag.IsAdmin)
    {
        <p id="personCardAddPhoneLink" class="personCardJob personCardEdit " style="margin-top: 10px; display: block">добавить новый</p>
        
        <div class="personCardDialog personCardAddPhoneDialog">
            <p class="personCardChangePlaceDialogSimpleLabel">
                тип номера
            </p>
            <select id="phoneTypeComboBox" class="personCardCityComboBox personCardChangePlaceDialogSelect" tabindex="10">
                @foreach (var type in DBHelper.GetPhoneTypes())
                {
                    <option value="@type.Id">@type.Type</option>
                }
            </select>

            <p class="personCardChangePlaceDialogSimpleLabel">
                номер телефона
            </p>
            <input id="addPhoneTextBoxPhone" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="11"/>

            <div class="personCardChangePlaceDialogButtonsContainer">
                <p id="cancelAddPhone" class="personCardEdit personCardCancelEditPlaceButton">отменить</p>
                <input id="addSpecificPhoneButton" type="button" data-placeid="0" class="departmentSearchButton personCardSavePlaceDialogButton" value="сохранить" tabindex="12" />
            </div>
        </div>
    }

    <input type="file" id="upload" name="image" style="visibility: collapse; width: 1px; height: 1px" />
</div>


<script>

    $(document).ready(function () {

        $('.emploeeLink, .personCardDepartmentLink').on('click', function (e) {

            var currentPageItem = $(e.target);
            var url = currentPageItem.data('url');
            $('.progress').show();

            ChangeSelectedPage(0);

            ClearTreeSelection();
            loadSearchPage(url);
        });

        $('.backLink').on('click', function (e) {
            var currentPageItem = $(this);
            var url = currentPageItem.data('url');

            if (url == "") {
                $('#centralPart').empty();
                ClearTreeSelection();
                return;
            }

            if (url.indexOf('Help') != -1) {
                ChangeSelectedPageWithoutLoading(2);
            }

            if (url.indexOf('Favorites') != -1)
                ChangeSelectedPageWithoutLoading(1);

            if (url.indexOf('SearchEmployeesAdvanced') != -1 || url.indexOf('SearchEmployees') != -1) {

                var searchView = '@Url.Action("SearchView","Home", new {id=Guid.Empty})';
                loadSearchPage(searchView);
                loadSearchPageResult(url);
                return;
            }

            loadSearchPage(url);
        });


        $('.personCardDeletePhoneLink').on('click', function (e) {
            var currentPageItem = $(this);
            var url = currentPageItem.data('url');

            loadSearchPage(url);
        });


        $('#editContactPersonLink').on('click', function (e) {
            hideAllDialogs();

            var dialog = $('.specificCardChangePersonDialog').first();
            var oldPosition = $(this).position();
            dialog.css({
                top: (oldPosition.top)
            });

            dialog.show();
        });

        $('#editPlaceLink').on('click', function (e) {
            hideAllDialogs();

            var dialog = $(".personCardChangePlaceDialog").first();

            var oldPosition = $(this).position();
            dialog.css({
                top: (oldPosition.top)
            });

            dialog.show();
        });

        $('#cancelEditPlace, #cancelEditPhone, #cancelAddPhone').on('click', function () {
            hideAllDialogs();
        });

        $('.personCardEditPhoneLink').on('click', function (e) {
            hideAllDialogs();

            var clickedItem = $(e.target);

            var placeId = clickedItem.data('placeid');

            var idItem = clickedItem.attr('id');

            idItem = idItem.substr(14);//"editPhoneLink_".length == 14

            var text = clickedItem.data('phone');
            $('#personCardChangePhoneTextBox').val(text);

            var dialog = $('.personCardChangePhoneDialog').first();

            $('#updateSpecificPhoneButton').attr("data-placeId", placeId);

            var oldPosition = $(this).position();

            dialog.css({
                top: (oldPosition.top)
            });

            dialog.show();
        });

        $('#personCardAddPhoneLink').on('click', function (e) {
            hideAllDialogs();

            var dialog = $(".personCardAddPhoneDialog").first();

            var oldPosition = $(this).position();
            dialog.css({
                top: (oldPosition.top)
            });

            dialog.show();
        });

        function hideAllDialogs() {
            $(".personCardDialog").hide();
        }

        $('#savePersonButton').on('click', function () {
            var url = '@Url.Action("SavePersonForSpecificCard","Home")';

            var personId = $('#personListForSpecific option:selected').val();
            var specificId = $('.specificCardChangePersonDialog :first').data('specificid');

            savePersonForSpecific(url, specificId, personId);
        });

        //сохранение контактного лица
        function savePersonForSpecific(url, specificId, personId) {
            var parent = $('#centralPart');
            if (parent != null) {
                parent.append('<div class="centralPartWithProgressBar"/>');
            }

            $.get(url, { id: specificId, employeeId: personId }, function (data) {
                if (parent != null) {
                    parent.empty();
                    parent.append(data);
                }
            });
        }

        //удаление контактного лица
        $('#removeContactPersonLink').on('click', function () {
            var url = '@Url.Action("RemovePersonFromSpecificCard","Home")';
            var specificId = $('.specificCardChangePersonDialog :first').data('specificid');


            var parent = $('#centralPart');
            if (parent != null) {
                parent.append('<div class="centralPartWithProgressBar"/>');
            }

            $.get(url, { id: specificId }, function(data) {
                if (parent != null) {
                    parent.empty();
                    parent.append(data);
                }
            });
        });

        //удаление specificStaff
        $('#removeSpecificStaff').on('click', function() {
            var deleting = confirm("Удалить эту позицию?");

            if (deleting) {

                var url = '@Url.Action("DeleteSpecificStaff", "Home")';
                var specificId = $('.specificCardChangePersonDialog :first').data('specificid');

                $.post(url, { id: specificId }, function () {                    
                    var parent = $('#centralPart');
                    if (parent != null) {
                        parent.empty();
                    }
                });
            }
        });

        $('#updateSpecificPhoneButton').on('click', function () {
            var url = '@Url.Action("SaveSpecificPhone", "Home")';

            var specificId = $('.specificCardChangePersonDialog :first').data('specificid');
            var place = $('#updateSpecificPhoneButton').data('placeid');
            var phone = $('#personCardChangePhoneTextBox').val();

            savePhone(url, specificId, place, null, phone);
        });

        $('#addSpecificPhoneButton').on('click', function () {
            var url = '@Url.Action("SaveSpecificPhone", "Home")';

            var specificId = $('.specificCardChangePersonDialog :first').data('specificid');
            var phoneType = $('#phoneTypeComboBox option:selected').val();
            var phone = $('#addPhoneTextBoxPhone').val();

            savePhone(url, specificId, null, phoneType, phone);
        });

        //сохранение телефона
        function savePhone(url, specificStaffId, specificStaffPlaceId, phoneType, phone) {
            var parent = $('#centralPart');
            if (parent != null) {
                parent.append('<div class="centralPartWithProgressBar"/>');
            }

            $.get(url, { specificStaffId: specificStaffId, specificStaffPlaceId: specificStaffPlaceId, phoneType: phoneType, phone: phone }, function (data) {
                if (parent != null) {
                    parent.empty();
                    parent.append(data);
                }
            });
        }




        //изменение местоположения


        //загрузка словаря
        function loadDictionary(url, data, parent) {
            $.ajax({
                url: url,
                data: data,
                cache: false,
            })
                .done(function (result) {
                    if (parent != null) {
                        parent.append(result);
                    }
                });
        }



        //изменилась территория
        $('#specificCardTerritoryComboBoxControl').change(function () {

            //очищаем все поля
            $('#specificCardRegionComboBoxControl option').remove();
            $('#specificCardCityComboBoxControl option').remove();
            $('#specificCardStreetComboBoxControl option').remove();
            $('#specificCardHouseComboBoxChange option').remove();
            $('#specificCardPavilionComboBoxChange option').remove();

            //грузим регионы
            var url = '@Url.Action("GetRegions", "Employee")';
            var data = { division: "@Model.DivisionId.Value", territory: $('#specificCardTerritoryComboBoxControl option:selected').val() };
            $.ajax({
                url: url,
                data: data,
                cache: false,
            })
                .done(function (result) {
                    $('#specificCardRegionComboBoxControl').append(result);
                });
        });


        //изменился регион
        $('#specificCardRegionComboBoxControl').change(function () {

            //очищаем все поля
            $('#specificCardCityComboBoxControl option').remove();
            $('#specificCardStreetComboBoxControl option').remove();
            $('#specificCardHouseComboBoxChange option').remove();
            $('#specificCardPavilionComboBoxChange option').remove();

            if ($('#specificCardRegionComboBoxControl option:selected').val() != '') {
                //загружаем города
                var url = '@Url.Action("GetCitiesForCreate", "Employee")';
                var data = { region: $('#specificCardRegionComboBoxControl option:selected').val() };
                loadDictionary(url, data, $('#specificCardCityComboBoxControl'));
            }
        });


        //изменился город
        $('#specificCardCityComboBoxControl').change(function () {
            //очищаем все поля                
            $('#specificCardStreetComboBoxControl option').remove();
            $('#specificCardHouseComboBoxChange option').remove();
            $('#specificCardPavilionComboBoxChange option').remove();

            if ($('#specificCardCityComboBoxControl option:selected').val() != '') {
                //загружаем улицы
                var url = '@Url.Action("GetStreets", "Employee")';
                var data = { locality: $('#specificCardCityComboBoxControl option:selected').val() };
                loadDictionary(url, data, $('#specificCardStreetComboBoxControl'));
            }
        });



        //изменилась улица
        $('#specificCardStreetComboBoxControl').change(function () {
            //очищаем все поля                            
            $('#specificCardHouseComboBoxChange option').remove();
            $('#specificCardPavilionComboBoxChange option').remove();

            if ($('#specificCardStreetComboBoxControl option:selected').val() != '') {
                //загружаем дома
                var url = '@Url.Action("GetHouses", "Employee")';
                var data = { locality: $('#specificCardCityComboBoxControl option:selected').val(), street: $('#specificCardStreetComboBoxControl option:selected').val() };
                loadDictionary(url, data, $('#specificCardHouseComboBoxChange'));
            }
        });


        //измениося дом
        $('#specificCardHouseComboBoxChange').change(function () {
            //очищаем все поля                            
            $('#specificCardPavilionComboBoxChange option').remove();

            if ($('#specificCardHouseComboBoxChange option:selected').val() != '') {
                //загружаем корпуса
                var url = '@Url.Action("GetPavillions", "Employee")';
                var data = { locality: $('#specificCardCityComboBoxControl option:selected').val(), edifice: $('#specificCardHouseComboBoxChange option:selected').val() };
                loadDictionary(url, data, $('#specificCardPavilionComboBoxChange'));
            }
        });


        $('#savePlaceButton').on('click', function () {

            var url = '@Url.Action("SaveSpecificLocation", "Home")';


            var specificStaff = '@Model.SpecificStaff.Id';
            var region = $('#specificCardRegionComboBoxControl option:selected').val();
            var territory = $('#specificCardTerritoryComboBoxControl option:selected').val();
            var city = $('#specificCardCityComboBoxControl option:selected').val();
            var street = $('#specificCardStreetComboBoxControl option:selected').val();
            var edifice = $('#specificCardHouseComboBoxChange option:selected').val();
            var pavillion = $('#specificCardPavilionComboBoxChange option:selected').val();
            var office = $('#specificCardOfficeChange').val();

            if (region == '') {
                alert("Необходимо указать регион.");
                return;
            } else {
                if (city == '') {
                    alert("Необходимо указать населенный пункт");
                    return;
                } else {
                    if (street == '') {
                        alert("Необходимо указать улицу");
                        return;
                    } else {
                        if (edifice == '') {
                            alert("Необходимо указать номер дома");
                            return;
                        }
                    }
                }
            }

            savePlace(url, specificStaff, city, street, edifice, office, pavillion, territory);
        });

        //сохранение места
        function savePlace(url, specificStaff, city, street, edifice, office, pavillion, territory) {

            var parent = $('#centralPart');
            if (parent != null) {
                parent.append('<div class="centralPartWithProgressBar"/>');
            }

            $.get(url, { specificStaffId: specificStaff, city: city, edifice: edifice, pavillion: pavillion, office: office, territory: territory }, function (data) {
                if (parent != null) {
                    parent.empty();
                    parent.append(data);
                }
            });
        }
    });

</script>