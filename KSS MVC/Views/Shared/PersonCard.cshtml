@{
    Layout = "";
}

@using KSS.Helpers
@model KSS.Models.EmployeeModel
           
@{
    var months = new Dictionary<int, string>
    {
        {1, "января"},
        {2, "февраля"},
        {3, "марта"},
        {4, "апреля"},
        {5, "мая"},
        {6, "июня"},
        {7, "июля"},
        {8, "августа"},
        {9, "сентября"},
        {10, "октября"},
        {11, "ноября"},
        {12, "декабря"},
    };
}

<script src="@Url.Content("~/Scripts/jquery.jstree.js")" type="text/javascript"></script>

<div class="personCardLayout">
    <p class="paginationArrow" style="">←</p>
    <a class="paginationNavigationLink backLink" style="" data-url="@ViewBag.BackLink">Назад</a>

    <div style="margin-top: 10px">
        <div style="float:left">

            <img class="personIMG" src="data:image/png;base64, @Model.GetImage()" />

            @if (ViewBag.IsAdmin)
        {
                <p id="loadImageLink" class="personCardEdit personCardLoadImage">загрузить фото</p>
        }
        </div>


        <div class="aroundPhotoPersonContainer">
            <h5 class="personCardName">
                @Model.Employee.Name
            </h5>

            @if (Model.Employee.BirthDay.HasValue)
        {
                <p class="personCardBirthDay">День Рождения: @Model.Employee.BirthDay.Value.Day @months[@Model.Employee.BirthDay.Value.Month]</p>
        }

            <a class="personCardEmail" href="mailto:@Model.Employee.EMail">@Model.Employee.EMail</a>

            <a class="personCardAddToFavoriteLink" data-url='@Url.Action("ChangeFavoriteStatus", "Employee", new { id = Model.Employee.Id})'>
                @if (Model.IsFavorite)
                {
                    <img src="~/Images/selectedStar.png" />
                    <p title="Удалить из избранного">в избранном</p>
                }
                else
                {
                    <img src="~/Images/star.png" />
                    <p>добавить в избранное</p>
                }
            </a>
        </div>

    </div>
    <br/>
    
    <div class="personCardJobContainer">
        <p class="personCardJobTitle">Должность:</p>
        <p class="personCardJob">@Model.PositionState.Title</p>

        <p class="personCardJobTitle personCardJobMarginTop">Филиал:</p>
        <p class="personCardJob personCardJobMarginTop">@Model.DivisionState.Division</p>


        <p class="personCardJobTitle personCardJobMarginTop">Подразделение:</p>
        <p class="personCardJob personCardJobMarginTop">
            @{
                var items = Model.GetFullDepartmentName();
                for (int i = items.Count - 1; i > -1; i--)
                {
                    if (items[i].ExpirationDate == null)
                    {
                        <a class="personCardDepartmentLink" data-url="@Url.Action("SearchView", "Home", new {id = items[i].Id})"> @items[i].Department</a>
                    }
                    else
                    {
                        <a> @items[i].Department</a>
                    }
                    
                    if (i != 0)
                    {
                        <a> -> </a>
                    }
                }
                if (items.Count == 0)
                {
                    <p class="personCardJob">-</p>   
                }
            }
        </p>
        
        
        <p class="personCardJobTitle personCardJobMarginTop">Член штаба:</p>
        @if (ViewBag.IsAdmin)
        {
            if (Model.Employee.IsMemberOfHeadquarter.HasValue && Model.Employee.IsMemberOfHeadquarter.Value)
            {
                <input id='memberOfHeadquarter' type="checkbox" value="@Model.Employee.Id" checked class="personCardDepartmentMember" />
            }
            else
            {
                <input id='memberOfHeadquarter' type="checkbox" value="@Model.Employee.Id" class="personCardDepartmentMember" />
            }
        }
        else
        {
            if (Model.Employee.IsMemberOfHeadquarter.HasValue && Model.Employee.IsMemberOfHeadquarter.Value)
            {
                <input id='memberOfHeadquarter' type="checkbox" value="@Model.Employee.Id" checked disabled="" class="personCardDepartmentMember" />
            }
            else
            {
                <input id='memberOfHeadquarter' type="checkbox" value="@Model.Employee.Id" disabled="" class="personCardDepartmentMember" />
            }
        }
        
    </div>
    
    
    @if (ViewBag.IsAdmin)
    {
        <p id="addPlaceLink" class="personCardEdit " style="margin-top: 60px; display: block; width: 160px">создать новое местоположение</p>
        
        <div class="personCardCreatePlaceDialog personCardDialog">
            <p class="personCardChangePlaceDialogSimpleLabel">филиал</p>
            <input id="newDivisionTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />
            
            <p class="personCardChangePlaceDialogSimpleLabel">существующий филиал</p>
            <select id="existedDivisionComboBox" class="personCardRegionComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="" selected>не выбран</option>
                @foreach (var reg in DBHelper.GetLastDivisionStates())
                {
                    <option value="@reg.Id">@reg.Division</option>
                }
            </select>

            <p class="personCardChangePlaceDialogSimpleLabel">родительский филиал</p>
            <select id="parentDivisionComboBox" class="personCardRegionComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="" selected>не выбран</option>
                @foreach (var reg in DBHelper.GetDivisionStates())
                {
                    <option value="@reg.Id">@reg.Division</option>
                }
            </select>
            
            <p class="personCardChangePlaceDialogSimpleLabel">территория</p>
            <input id="newTerritoryTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />

            <p class="personCardChangePlaceDialogSimpleLabel">существующая территория</p>
            <select id="existedTerritoryComboBox" class="personCardRegionComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="" selected>не выбран</option>
            </select>
            
            <p class="personCardChangePlaceDialogSimpleLabel">новый регион</p>
            <input id="newRegionTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />
            
            <p class="personCardChangePlaceDialogSimpleLabel">существующий регион</p>
            <select id="existedRegionComboBox" class="personCardRegionComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="" selected>не выбран</option>
            </select>
            

            
            <p class="personCardChangePlaceDialogSimpleLabel">населенный пункт</p>
            <input id="newCityTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />
            
            <p class="personCardChangePlaceDialogSimpleLabel">существующий населенный пункт</p>
            <select id="existedCityComboBox" class="personCardCityComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="" selected>не выбран</option>
            </select>
            
            <p class="personCardChangePlaceDialogSimpleLabel">внутренний код телефонов</p>
            <input id="newInnerCityPhone" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />
            
            <p class="personCardChangePlaceDialogSimpleLabel">междугородний код телефонов</p>
            <input id="newOuterCityPhone" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />
            
            <p class="personCardChangePlaceDialogSimpleLabel">улица</p>
            <input id="newStreeTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />
            
            <p class="personCardChangePlaceDialogSimpleLabel">существующая улица</p>
            <select id="existedStreetComboBox" class="personCardStreetComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="" selected>не выбран</option>
            </select>
            
            <p class="personCardChangePlaceDialogSimpleLabel">дом</p>
            <input id="newHouseTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />

            <p class="personCardChangePlaceDialogSimpleLabel">существующий дом</p>
            <select id="existedHouseComboBox" class="personCardHouseComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="" selected>не выбран</option>
            </select>
            
            <p class="personCardChangePlaceDialogSimpleLabel">номер корпуса</p>
            <input id="newPavilionTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="4" />


            <div class="personCardChangePlaceDialogButtonsContainer">
                <p id="cancelEditPlace" class="personCardEdit personCardCancelEditPlaceButton">отменить</p>
                <input id="createPlaceButton" type="button" class="departmentSearchButton personCardSavePlaceDialogButton" value="сохранить" tabindex="7" />
            </div>

        </div>
    }
    

    <div class="personCardPlaceContainer">
        <p class="personCardJobTitle">Местоположение:</p>

@*        <p class="personCardJob">Россия, Ростовская область, Ростов-на-Дону</p>*@
        
            @if (Model.Location != null)
            {
                <!--в этой только СТРАНА, ОБЛАСТЬ, ГОРОД-->
                <p class="personCardJob">
                    
                    @Model.Location.Locality.Country, @Model.Location.Locality.Region, @Model.Location.Locality.Locality1
                </p>

                <!--в этой только УЛИЦА, ДОМ-->
@*                <p class="personCardJob">ул. Большая Садовая, 49.</p>*@
                <p class="personCardJob">
                    @Model.Location.Street, @Model.Location.Edifice, @Model.Location.Building
                </p>
            }
            else
            {
                <p class="personCardJob">-</p>
                <p class="personCardJob"></p>
            }


        <p class="personCardJobTitle personCardJobMarginTop">Номер офиса:</p>
        
        @if (Model.EmployeePlaces.Any(t => !string.IsNullOrEmpty(t.Office)))
        {
            <p class="personCardJob personCardJobMarginTop">
                @Model.EmployeePlaces.First(t => !string.IsNullOrEmpty(t.Office)).Office
            </p>
        }
        else
        {
            <p class="personCardJob personCardJobMarginTop">-</p>
        }
      
        
        @if (ViewBag.IsAdmin)
        {
            <p id="editPlaceLink" class="personCardJob personCardEdit ">редактировать</p>
        }
    </div>
    
    @if (ViewBag.IsAdmin)
    {
        <div class="personCardChangePlaceDialog personCardDialog">
            <p class="personCardChangePlaceDialogSimpleLabel">страна</p>
            <select class="personCardCountryComboBox personCardChangePlaceDialogSelect" tabindex="1">
                <option selected="selected">Россия</option>
            </select>
        
            <p class="personCardChangePlaceDialogSimpleLabel">регион</p>
            <select id="personCardRegionComboBoxControl" class="personCardRegionComboBox personCardChangePlaceDialogSelect" tabindex="2">
                <option value="">не выбран</option>
                @foreach (var reg in Model.GetRegions())
                {
                    if (Model.Location != null && string.Equals(Model.Location.Locality.Region, reg))
                    {
                        <option value="@reg" selected="selected">@reg</option>
                        continue;
                    }
                    <option value="@reg">@reg</option>
                }
            </select>
        
            <p class="personCardChangePlaceDialogSimpleLabel">населенный пункт</p>
            <select id="personCardCityComboBoxControl" class="personCardCityComboBox personCardChangePlaceDialogSelect" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.Location != null)
                {
                    foreach (var reg in DBHelper.GetLocalities(Model.Location.Locality.Country, Model.Location.Locality.Region))
                    {
                        if (Model.Location != null && string.Equals(Model.Location.Locality.Locality1, reg.Value))
                        {
                            <option value="@reg.Key" selected="selected">@reg.Value</option>
                            continue;
                        }
                        <option value="@reg.Key">@reg.Value</option>
                    }
                }
            </select>
        
            <p class="personCardChangePlaceDialogSimpleLabel">улица</p>
            <select id="personCardStreetComboBoxControl" class="personCardStreetComboBox personCardChangePlaceDialogSelect" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.Location != null )
                {
                    foreach (var reg in DBHelper.GetStreets(Model.Location.Locality.Id))
                    {
                        if (Model.Location != null && Model.Location.Street == reg.Value)
                        {
                            <option value="@reg.Key" selected="selected">@reg.Value</option>
                            continue;
                        }
                        <option value="@reg.Key">@reg.Value</option>
                    }
                }
            </select>
            
            <p class="personCardChangePlaceDialogSimpleLabel">дом</p>
            <select id="personCardHouseComboBoxChange" class="personCardStreetComboBox personCardChangePlaceDialogSelect" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.Location != null)
                {
                    foreach (var reg in DBHelper.GetHouses(Model.Location.Locality.Id, Model.Location.Id))
                    {
                        if (Model.Location != null && Model.Location.Edifice == reg.Value)
                        {
                            <option value="@reg.Key" selected="selected">@reg.Value</option>
                            continue;
                        }
                        <option value="@reg.Key">@reg.Value</option>
                    }
                }
            </select>


           
            <p class="personCardChangePlaceDialogSimpleLabel personCardChangePlaceDialogHalfLabel">номер корпуса</p>
            <p class="personCardChangePlaceDialogSimpleLabel personCardChangePlaceDialogHalfLabel">номер офиса</p>
        
            
            <select id="personCardPavilionComboBoxChange" class="personCardStreetComboBox personCardChangePlaceDialogSelect personCardChangePlaceDialogHalfText" tabindex="3">
                <option value="">не выбран</option>
                @if (Model.Location != null)
                {
                    foreach (var reg in DBHelper.GetPavillions(Model.Location.Locality.Id, Model.Location.Id))
                    {
                        if (Model.Location != null && Model.Location.Building == reg)
                        {
                            <option value="@reg" selected="selected">@reg</option>
                            continue;
                        }
                        <option value="@reg">@reg</option>
                    }
                }
            </select>


            @if (Model.Location != null)
            {
                <input id="personCardOfficeChange" type="text" class="personCardOfficeNumber personCardChangePlaceDialogText personCardChangePlaceDialogHalfText" tabindex="6" value="@Model.Place.Office" />
            }
            else
            {                
                <input id="personCardOfficeChange" type="text" class="personCardOfficeNumber personCardChangePlaceDialogText personCardChangePlaceDialogHalfText" tabindex="6" />
            }

        
            <div class="personCardChangePlaceDialogButtonsContainer">
                <p id="cancelEditPlace" class="personCardEdit personCardCancelEditPlaceButton">отменить</p>
                <input id="savePlaceButton" type="button" class="departmentSearchButton personCardSavePlaceDialogButton" value="сохранить" tabindex="7"/>                    
            </div>

        </div>
    }


    <div class="personCardPlaceContainer">
        <p class="personCardPhonesHeader" style="float:none">ТЕЛЕФОНЫ СОТРУДНИКА:</p>
        
        @for (int i = 0; i < Model.EmployeePlaces.Count; i++)
        {
            if (string.IsNullOrEmpty(Model.EmployeePlaces[i].PhoneNumber) || Model.EmployeePlaces[i].PhoneNumber == "_")
            {
                continue;
            }
            <div>
                <p id="phoneType_@i" class="personCardJobTitle">@Model.EmployeePlaces[i].PhoneType.Category:</p>
@*                <p id="phoneNumber_@i" class="personcardJobEdit ">@Model.EmployeePlaces[i].PhoneNumber</p>*@
                <p id="phoneNumber_@i" class="personcardJobEdit ">@Model.ParseNumber(i)</p>
                @if (ViewBag.IsAdmin)
                {
                    <p id="editPhoneLink_@i" class="personCardEdit personCardEditPhoneLink" data-placeid="@Model.EmployeePlaces[i].Id">редактировать</p>
                    <p id="deletePhoneLink_@i" class="personCardEdit personCardDeletePhoneLink" data-url="@Url.Action("DeletePhone", "Employee", new { employee = Model.Employee.Id, employPlaceId = Model.EmployeePlaces[i].Id })">удалить</p>
                }
                else
                {
                    <p class="personCardEdit personCardEditPhoneLink" style="visibility: hidden">редактировать</p>
                }
            </div>
        }
        @if (ViewBag.IsAdmin)
        {
            <div class="personCardDialog personCardChangePhoneDialog" >
                <p id="personCardChangePhoneDialogPhoneTypeLabel" class="personCardChangePlaceDialogSimpleLabel">
                    тип номера
                </p>
                <input id="personCardChangePhoneTextBox" type="text" class="personCardStreet personCardChangePlaceDialogText" />

                <div class="personCardChangePlaceDialogButtonsContainer">
                    <p id="cancelEditPhone" class="personCardEdit personCardCancelEditPlaceButton">отменить</p>
                    <input id="updatePhoneButton" data-placeid="0" type="button" class="departmentSearchButton personCardSavePlaceDialogButton" value="сохранить" tabindex="7" />
                </div>
            </div>
        }
    </div>
    
    @if (ViewBag.IsAdmin)
    {
        <p id="personCardAddPhoneLink" class="personCardJob personCardEdit " style="margin-top: 10px; display: block">добавить новый</p>
        
        <div class="personCardDialog personCardAddPhoneDialog">
            <p class="personCardChangePlaceDialogSimpleLabel">
                тип номера
            </p>
            <select id="phoneTypeComboBox" class="personCardCityComboBox personCardChangePlaceDialogSelect" tabindex="10">
                @foreach (var type in DBHelper.GetPhoneTypes())
                {
                    <option value="@type.Id">@type.Type</option>
                }
            </select>

            <p class="personCardChangePlaceDialogSimpleLabel">
                номер телефона
            </p>
            <input id="addPhoneTextBoxPhone" type="text" class="personCardStreet personCardChangePlaceDialogText" tabindex="11"/>

            <div class="personCardChangePlaceDialogButtonsContainer">
                <p id="cancelAddPhone" class="personCardEdit personCardCancelEditPlaceButton">отменить</p>
                <input id="addPhoneButton" type="button" data-placeid="0" class="departmentSearchButton personCardSavePlaceDialogButton" value="сохранить" tabindex="12" />
            </div>
        </div>
    }

    <input type="file" id="upload" name="image" style="visibility: collapse; width: 1px; height: 1px" />
</div>


<script>

    $(document).ready(function () {

        $('.personCardDepartmentLink').on('click', function (e) {

            var currentPageItem = $(e.target);
            var url = currentPageItem.data('url');
            $('.progress').show();

            ChangeSelectedPage(0);

            ClearTreeSelection();
            loadSearchPage(url);
        });

        $('.backLink').on('click', function (e) {
            var currentPageItem = $(this);
            var url = currentPageItem.data('url');

            if (url == "") {
                $('#centralPart').empty();
                ClearTreeSelection();
                return;
            }

            if (url.indexOf('Help') != -1) {
                ChangeSelectedPageWithoutLoading(2);
            }

            if (url.indexOf('Favorites') != -1)
                ChangeSelectedPageWithoutLoading(1);

            if (url.indexOf('Specific') != -1)
                ChangeSelectedPage(3);

            if (url.indexOf('SearchEmployeesAdvanced') != -1 || url.indexOf('SearchEmployees') != -1) {

                var searchView = '@Url.Action("SearchView","Home", new {id=Guid.Empty})';
                loadSearchPage(searchView);
                loadSearchPageResult(url);
                return;
            }

            loadSearchPage(url);
        });


        $('.personCardAddToFavoriteLink, .personCardDeletePhoneLink').on('click', function (e) {
            var currentPageItem = $(this);
            var url = currentPageItem.data('url');

            loadSearchPage(url);
        });


        $('#addPlaceLink').on('click', function (e) {
            hideAllDialogs();

            var dialog = $(".personCardCreatePlaceDialog").first();

            var oldPosition = $(this).position();
            dialog.css({
                top: (oldPosition.top)
            });

            dialog.show();
        });

        $('#editPlaceLink').on('click', function (e) {
            hideAllDialogs();

            var dialog = $(".personCardChangePlaceDialog").first();

            var oldPosition = $(this).position();
            dialog.css({
                top: (oldPosition.top)
            });

            dialog.show();
        });

        $('#cancelEditPlace, #cancelEditPhone, #cancelAddPhone').on('click', function () {
            hideAllDialogs();
        });

        $('.personCardEditPhoneLink').on('click', function (e) {
            hideAllDialogs();

            var clickedItem = $(e.target);

            var placeId = clickedItem.data('placeid');

            var idItem = clickedItem.attr('id');

            idItem = idItem.substr(14);//"editPhoneLink_".length == 14


            var text = $('#phoneNumber_' + idItem).text();            
            if (text != "") {
                text = text.replace('(', '');
                text = text.replace(')', '');
                text = text.replace('-', '');
            }
            $('#personCardChangePhoneTextBox').val(text);

            var dialog = $('.personCardChangePhoneDialog').first();

            $('#updatePhoneButton').attr("data-placeId", placeId);

            var oldPosition = $(this).position();

            dialog.css({
                top: (oldPosition.top)
            });

            dialog.show();
        });

        $('#personCardAddPhoneLink').on('click', function (e) {
            hideAllDialogs();

            var dialog = $(".personCardAddPhoneDialog").first();

            var oldPosition = $(this).position();
            dialog.css({
                top: (oldPosition.top)
            });

            dialog.show();
        });

        $('#loadImageLink').on('click', function (e) {
            hideAllDialogs();
            $('#upload').click();
        });

        function readImage(input) {
            if (input.files && input.files[0]) {
                var FR = new FileReader();
                FR.onload = function (e) {
                    $('.personIMG').attr("src", e.target.result);

                    var url = '@Url.Action("SavePhoto", "Employee")';
                    var user = $('#memberOfHeadquarter').val();

                    savePhoto(url, user, e.target.result);
                };
                FR.readAsDataURL(input.files[0]);
            }
        }

        //сохранение места
        function savePhoto(url, user, image) {
            var parent = $('#centralPart');
            if (parent != null) {
                parent.append('<div class="centralPartWithProgressBar"/>');
            }

            $.post(url, { employee: user, image: image },
                function (data) {
                    if (parent != null) {
                        parent.find('.centralPartWithProgressBar').remove();
                    }

                    if (data != "")
                        alert(data);
                });
        }

        $('#upload').change(function () {
            var file = this.files[0];
            var name = file.name;
            var size = file.size;
            var type = file.type;


            if (type.toString().indexOf("image") == -1)
                alert('Неверный формат фотографии. Выберите другой файл.')
            else {
                readImage(this);
            }
        });

        function hideAllDialogs() {
            $(".personCardDialog").hide();
        }


        //region changed
        $('#personCardRegionComboBoxControl').change(function () {

            //очищаем все поля
            $('#personCardCityComboBoxControl option').remove();
            $('#personCardStreetComboBoxControl option').remove();
            $('#personCardHouseComboBoxChange option').remove();
            $('#personCardPavilionComboBoxChange option').remove();            

            if ($('#personCardRegionComboBoxControl option:selected').val() != '') {
                //загружаем города
                var url = '@Url.Action("GetCitiesForCreate", "Employee")';
                var data = { region: $('#personCardRegionComboBoxControl option:selected').val() };
                loadDictionary(url, data, $('#personCardCityComboBoxControl'));
            } 
        });

        //city changed
        $('#personCardCityComboBoxControl').change(function () {
            //очищаем все поля                
            $('#personCardStreetComboBoxControl option').remove();
            $('#personCardHouseComboBoxChange option').remove();
            $('#personCardPavilionComboBoxChange option').remove();            

            if ($('#personCardCityComboBoxControl option:selected').val() != '') {
                //загружаем улицы
                var url = '@Url.Action("GetStreets", "Employee")';
                var data = { locality: $('#personCardCityComboBoxControl option:selected').val() };
                loadDictionary(url, data, $('#personCardStreetComboBoxControl'));
            } 
        });

        //street changed
        $('#personCardStreetComboBoxControl').change(function () {
            //очищаем все поля                            
            $('#personCardHouseComboBoxChange option').remove();
            $('#personCardPavilionComboBoxChange option').remove();            

            if ($('#personCardStreetComboBoxControl option:selected').val() != '') {
                //загружаем дома
                var url = '@Url.Action("GetHouses", "Employee")';
                var data = { locality: $('#personCardCityComboBoxControl option:selected').val(), street: $('#personCardStreetComboBoxControl option:selected').val() };                
                loadDictionary(url, data, $('#personCardHouseComboBoxChange'));
            }
        });

        //house changed
        $('#personCardHouseComboBoxChange').change(function () {
            //очищаем все поля                            
            $('#personCardPavilionComboBoxChange option').remove();            

            if ($('#personCardHouseComboBoxChange option:selected').val() != '') {
                //загружаем корпуса
                var url = '@Url.Action("GetPavillions", "Employee")';
                var data = { locality: $('#personCardCityComboBoxControl option:selected').val(), edifice: $('#personCardHouseComboBoxChange option:selected').val() };
                loadDictionary(url, data, $('#personCardPavilionComboBoxChange'));
            }
        });

        function loadDictionary(url, data, parent) {
            $.ajax({
                    url: url,
                    data: data,
                    cache: false,
                })
                .done(function(result) {
                    if (parent != null) {
                        parent.append(result);
                    }
                });
        }


        $('#savePlaceButton').on('click', function () {

            var url = '@Url.Action("SaveLocation", "Employee")';

            var user = $('#memberOfHeadquarter').val();
            var region = $('#personCardRegionComboBoxControl option:selected').val();
            var city = $('#personCardCityComboBoxControl option:selected').val();
            var street = $('#personCardStreetComboBoxControl option:selected').val();
            var edifice = $('#personCardHouseComboBoxChange option:selected').val();            
            var pavillion = $('#personCardPavilionComboBoxChange option:selected').val();
            var office = $('#personCardOfficeChange').val();

            if (region == '') {
                alert("Необходимо указать регион.");
                return;
            } else {
                if (city == '') {
                    alert("Необходимо указать населенный пункт");
                    return;
                } else {
                    if (street == '') {
                        alert("Необходимо указать улицу");
                        return;
                    } else {
                        if (edifice == '') {
                            alert("Необходимо указать номер дома");
                            return;
                        } 
                    }
                }
            }

            savePlace(url, user, city, street, edifice, office, pavillion);
        });


        $('#memberOfHeadquarter').change(function () {

            var control = $(this);
            $.post('@Url.Action("ChangeMemberOfHeadquarter","Employee")', { employee: control.val(), isMember: control.is('input:checked') }, function (data) {

            });
        });


        //сохранение места
        function savePlace(url, user, city, street, edifice, office, pavillion) {

            var parent = $('#centralPart');
            if (parent != null) {
                parent.append('<div class="centralPartWithProgressBar"/>');
            }

            $.get(url, { employee: user, city: city, edifice: edifice, pavillion: pavillion, office: office }, function (data) {
                if (parent != null) {
                    parent.empty();
                    parent.append(data);
                }
            });
        }


        $('#updatePhoneButton').on('click', function () {
            var url = '@Url.Action("SavePhone", "Employee")';

            var user = $('#memberOfHeadquarter').val();
            var place = $('#updatePhoneButton').data('placeid');
            var phone = $('#personCardChangePhoneTextBox').val();

            savePhone(url, user, place, null, phone);
        });

        $('#addPhoneButton').on('click', function () {
            var url = '@Url.Action("SavePhone", "Employee")';

            var user = $('#memberOfHeadquarter').val();
            var phoneType = $('#phoneTypeComboBox option:selected').val();
            var phone = $('#addPhoneTextBoxPhone').val();

            savePhone(url, user, null, phoneType, phone);
        });

        function savePhone(url, user, place, phoneType, phone) {
            var parent = $('#centralPart');
            if (parent != null) {
                parent.append('<div class="centralPartWithProgressBar"/>');
            }

            $.get(url, { employee: user, place: place, phoneType: phoneType, phone: phone }, function (data) {
                if (parent != null) {
                    parent.empty();
                    parent.append(data);
                }
            });
        }









        //create new place region

        //если дом выбран, то создание нового дома блокируется
        $('#existedHouseComboBox').change(function () {
            var selectedValue = $(this).find('option:selected').val();

            if (selectedValue == "") {
                $('#newHouseTextBox').removeAttr('disabled');
            } else {
                $('#newHouseTextBox').val("");
                $('#newHouseTextBox').attr('disabled', 'disabled');
            }
        });


        //если улица выбрана, то создание новой улицы блокируется
        $('#existedStreetComboBox').change(function () {
            var selectedValue = $(this).find('option:selected').val();

            resetComboBox(2);
            if (selectedValue == "") {
                $('#newStreeTextBox').removeAttr('disabled');

            } else {
                $('#newStreeTextBox').val("");
                $('#newStreeTextBox').attr('disabled', 'disabled');

                loadHousesForCreate();
            }
        });

        function loadHousesForCreate() {
            $('#existedHouseComboBox option').remove();

            //грузим дома
            var url = '@Url.Action("GetHouses", "Employee")';

            var data = { locality: $('#existedCityComboBox option:selected').val(), street: $('#existedStreetComboBox option:selected').val() };
            $.ajax({
                url: url,
                data: data,
                cache: false,
            })
                .done(function (result) {
                    $('#existedHouseComboBox').append(result);
                    $('#newHouseTextBox').removeAttr('disabled');
                });
        }


        //если город выбран, то создание нового города блокируется
        $('#existedCityComboBox').change(function () {
            var selectedValue = $(this).find('option:selected').val();

            resetComboBox(3);
            if (selectedValue == "") {
                $('#newCityTextBox').removeAttr('disabled');

                $('#newInnerCityPhone').removeAttr('disabled');
                $('#newOuterCityPhone').removeAttr('disabled');

            } else {
                $('#newCityTextBox').val("");
                $('#newCityTextBox').attr('disabled', 'disabled');

                $('#newInnerCityPhone').attr('disabled', 'disabled');
                $('#newOuterCityPhone').attr('disabled', 'disabled');

                loadStreetsForCreate();
            }
        });

        function loadStreetsForCreate() {
            $('#existedStreetComboBox option').remove();

            //грузим регионы
            var url = '@Url.Action("GetStreets", "Employee")';

            var data = { locality: $('#existedCityComboBox option:selected').val() };
            $.ajax({
                url: url,
                data: data,
                cache: false,
            })
                .done(function (result) {
                    $('#existedStreetComboBox').append(result);
                    $('#newStreeTextBox').removeAttr('disabled');
                });
        }

        //если регион выбран, то создание нового региона блокируется
        $('#existedRegionComboBox').change(function () {
            var selectedValue = $(this).find('option:selected').val();

            resetComboBox(4);
            if (selectedValue == "") {
                $('#newRegionTextBox').removeAttr('disabled');
            } else {
                $('#newRegionTextBox').val("");
                $('#newRegionTextBox').attr('disabled', 'disabled');

                loadCitiesForCreate();
            }
        });


        function loadCitiesForCreate() {
            $('#existedCityComboBox option').remove();

            //грузим регионы
            var url = '@Url.Action("GetCitiesForCreate", "Employee")';
            var data = { region: $('#existedRegionComboBox option:selected').val() };
            $.ajax({
                url: url,
                data: data,
                cache: false,
            })
                .done(function (result) {
                    $('#existedCityComboBox').append(result);
                    $('#newCityTextBox').removeAttr('disabled');
                });
        }

        //если дивизион выбран, то создание нового дивизиона блокируется
        $('#existedDivisionComboBox').change(function () {

            var selectedValue = $(this).find('option:selected').val();

            resetComboBox(6);

            if (selectedValue == "") {
                $('#newDivisionTextBox').removeAttr('disabled');
                $('#parentDivisionComboBox').removeAttr('disabled');

            } else {
                $('#newDivisionTextBox').val("");
                $('#newDivisionTextBox').attr('disabled', 'disabled');

                $('#parentDivisionComboBox option:selected').removeAttr('selected');
                $('#parentDivisionComboBox').attr('disabled', 'disabled');


                $('#existedTerritoryComboBox option').remove();
                //грузим территории для филиала
                var url = '@Url.Action("GetTerritories", "Employee")';
                var data = { division: selectedValue };
                $.ajax({
                    url: url,
                    data: data,
                    cache: false,
                })
                    .done(function (result) {
                        $('#existedTerritoryComboBox').append(result);
                        $('#newTerritoryTextBox').removeAttr('disabled');
                    });

                loadRegionForCreate();
            }
        });


        function loadRegionForCreate() {
            $('#existedRegionComboBox option').remove();

            //грузим регионы
            var url = '@Url.Action("GetRegions", "Employee")';
            var data = { division: $('#existedDivisionComboBox option:selected').val(), territory: $('#existedTerritoryComboBox option:selected').val() };
            $.ajax({
                url: url,
                data: data,
                cache: false,
            })
                .done(function (result) {
                    $('#existedRegionComboBox').append(result);
                    $('#newRegionTextBox').removeAttr('disabled');
                });
        }

        //если территория выбрана, то создание новой территории блокируется
        $('#existedTerritoryComboBox').change(function () {

            var selectedValue = $(this).find('option:selected').val();
            if (selectedValue == "") {
                $('#newTerritoryTextBox').removeAttr('disabled');
            } else {
                $('#newTerritoryTextBox').val("");
                $('#newTerritoryTextBox').attr('disabled', 'disabled');

                loadRegionForCreate();
            }
        });

        $('#createPlaceButton').on('click', function () {
            var user = $('#memberOfHeadquarter').val();

            var division = $('#newDivisionTextBox').val();
            var parentDivision = $('#parentDivisionComboBox option:selected').val();
            var existedDivision = $('#existedDivisionComboBox option:selected').val();

            var territory = $('#newTerritoryTextBox').val();
            var existedTerritory = $('#existedTerritoryComboBox option:selected').val();

            var newRegion = $('#newRegionTextBox').val();
            var existedRegion = $('#existedRegionComboBox option:selected').val();

            var city = $('#newCityTextBox').val();
            var existedCity = $('#existedCityComboBox option:selected').val();

            var innerPhone = $('#newInnerCityPhone').val();
            var outerPhone = $('#newOuterCityPhone').val();

            var street = $('#newStreeTextBox').val();
            var existedStreet = $('#existedStreetComboBox option:selected').val();

            var house = $('#newHouseTextBox').val();
            var existedHouse = $('#existedHouseComboBox option:selected').val();

            var pavilionInfo = $('#newPavilionTextBox').val();

            if (division == "" && existedDivision == "") {
                alert('Необходимо указать либо название нового филиала, либо выбрать из существующих');
                return;
            } else {
                if (newRegion == "" && existedRegion == "") {
                    alert('Необходимо указать либо название нового региона, либо выбрать из существующих');
                    return;
                } else {
                    if (city == "" && existedCity=="") {
                        alert('Необходимо указать наименование населенного пункта, либо выбрать из существующих');
                        return;
                    } else {
                        if (city != "" && innerPhone == "") {
                            alert('Необходимо указать внутренний код телефонов для данной территории');
                            return;
                        } else {
                            if (city != '' &&  outerPhone == "") {
                                alert('Необходимо указать междугородний код телефонов для данной территории');
                                return;
                            } else {
                                if (street == "" && existedStreet=="") {
                                    alert('Необходимо указать наименование улицы, либо выбрать из существующих');
                                    return;
                                } else {
                                    if (house == "" && existedHouse == "") {
                                        alert('Необходимо указать номер дома, либо выбрать из существующих');
                                        return;
                                    } else {

                                        if (existedHouse != "" && pavilionInfo=="") {
                                            alert('Необходимо указать номер корпуса');
                                            return;
                                        }

                                        if (territory == "" && existedTerritory == "") {
                                            alert('Необходимо указать либо название новой территории, либо выбрать из существующих');
                                            return;
                                        }                                        
                                    }
                                }
                            }
                        }
                    }
                }
            }

            var url = '@Url.Action("CreateNewLocation","Employee")';
            var data = {
                employee: user,
                newDivisionName: division,
                parentDivisionGuid: parentDivision,
                existedDivision: existedDivision,
                newRegion: newRegion,
                existedRegion: existedRegion,
                newTerritory: territory,
                existedTerritory: existedTerritory,
                city: city,
                existedCity: existedCity,
                innerPhoneCode: innerPhone,
                outerPhoneCode: outerPhone,
                street: street,
                existedStreet: existedStreet,
                house: house,
                existedHouse: existedHouse,
                pavilion: pavilionInfo
            };

            var parent = $('#centralPart');
            if (parent != null) {
                parent.append('<div class="centralPartWithProgressBar"/>');
            }
            $.get(url, data, function (result) {
                if (parent != null) {
                    parent.empty();
                    parent.append(result);
                }
            });
        });


        function resetComboBox(count) {
            if (count > 5) {
                $('#existedTerritoryComboBox option').remove();
                $('#existedTerritoryComboBox').append('<option value="" selected>не выбран</option>');
                $('#newTerritoryTextBox').removeAttr('disabled');
            }
            if (count > 4) {
                $('#existedRegionComboBox option').remove();
                $('#newRegionTextBox').removeAttr('disabled');
                $('#existedRegionComboBox').append('<option value="" selected>не выбран</option>');
            }
            if (count > 3) {
                $('#existedCityComboBox option').remove();
                $('#newCityTextBox').removeAttr('disabled');
                $('#newInnerCityPhone').removeAttr('disabled');
                $('#newOuterCityPhone').removeAttr('disabled');
                $('#existedCityComboBox').append('<option value="" selected>не выбран</option>');
            }
            if (count > 2) {
                $('#existedStreetComboBox option').remove();
                $('#newStreeTextBox').removeAttr('disabled');
                $('#existedStreetComboBox').append('<option value="" selected>не выбран</option>');
            }
            if (count > 1) {
                $('#existedHouseComboBox option').remove();
                $('#newHouseTextBox').removeAttr('disabled');
                $('#existedHouseComboBox').append('<option value="" selected>не выбран</option>');
            }
        }

        //end region
    });

</script>