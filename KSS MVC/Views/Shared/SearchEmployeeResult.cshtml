<link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
@{
    Layout = "";
}
@using System.Data.Entity.Core
@using KSS.Models
@using KSS.Server.Entities
@using Microsoft.Ajax.Utilities
@model List<EmployeeModel>

<ul class="personUL">
    
    @foreach (EmployeeModel employee in Model)
    {
        <li>
            <div class="lyncStatusDiv"></div>
            <div class="personIMGLayout">
                <img class="personIMG" src="http://cp14.nevsepic.com.ua/184/18370/1385021122-haunted__by_senju_hime-d3dj1ah.jpg" />    
            </div>
            <div class="innerPersonLayout">
                <h5 class="personName">
@*                    <a href='@Url.Action("Index", "Employee", new {id = employee.Employee.Id})'>@employee.Employee.Name</a>*@
                    <a class="emploeeLink" data-url='@Url.Action("Index", "Employee", new {id = employee.Employee.Id})'>@employee.Employee.Name</a>                    
                </h5>
                <p class="personDepartment"> @employee.DepartmentState.Department</p>
                <p class="personJob">@employee.PositionState.Title</p>
                <div class="phonesLine">
                    @for (int i = 0; i < employee.EmployeePlaces.Count; i++)
                    {
                        if (string.IsNullOrEmpty(employee.EmployeePlaces[i].PhoneNumber))
                        {
                            continue;
                        }

                        if (i == 0)
                        {
                            <p class="personCityPhone">@employee.EmployeePlaces[i].PhoneNumber;</p>
                        }
                        else
                        {
                            <p class="personMobilePhone">@employee.EmployeePlaces[i].PhoneNumber;</p>
                        }
                    }
                </div>
@*                <div class="phonesLine">*@
@*                    @foreach (SpecificStaffPlace specEmpPlace in employee.SpecificStaffPlaces)*@
@*                    {*@
@*                        <p class="personCityPhone">33-24;</p>*@
@*                        <p class="personMobilePhone">@specEmpPlace.PhoneNumber;</p> *@
@*                            $1$<p class="personMail">titov.german@rossety.com</p>#1#*@
@*                    }*@
@*                </div>*@
            </div>
        </li>
    }
</ul>
                            
@helper DrawPages(int startIndex, int count, bool after, bool before)
{
    if (before)
    {
        <a style="text-align: center; width: 30px; display: inline-block; margin-left: -33px">...</a>
    }

    for (int i = startIndex; i < count; i++)
    {
        if (i == ViewBag.StartIndex)
        {
            <a class='pageNmbr selectedPageNmbr' data-url='@Url.Action("SearchEmployees", "Home", new { employeeName = ViewBag.Search, startIndex = i })'>
                @(i + 1)
            </a>
        }
        else
        {
            <a class='pageNmbr' data-url='@Url.Action("SearchEmployees", "Home", new { employeeName = ViewBag.Search, startIndex = i })'>
                @(i + 1)
            </a>
        }
    }

    if (after)
    {
        <a style="text-align: center; width: 30px; display: inline-block">...</a>
    }
}

<div class="pagesContainer">
    @{
        if (ViewBag.StartIndex > 0)
        {
            <p class="paginationArrow">←</p>
            <a class="paginationNavigationLink" data-url='@Url.Action("SearchEmployees", "Home", new { employeeName = ViewBag.Search, startIndex = ViewBag.StartIndex - 1 })'>Назад</a>
        }
        else
        {
            <p class="paginationArrow" style="visibility: collapse">←</p>
            <a class="paginationNavigationLink" style="visibility: collapse">Назад</a>
        }

        if (ViewBag.StartIndex + 1 < ViewBag.PageCount)
        {
            <a class="paginationNavigationLink forwardLink" data-url='@Url.Action("SearchEmployees", "Home", new { employeeName = ViewBag.Search, startIndex = ViewBag.StartIndex + 1 })'>Вперед</a>
            <p class="paginationArrow">→</p>
        }
    }
</div>


<div id="pages" class="pagesContainer">
    @{
        const int maxPagesCount = 4;
        var length = ViewBag.PageCount;
        var startIndex = ViewBag.StartIndex;

        if (length > maxPagesCount)
        {
            //отрисовываем вариант при куче страниц


            if (length - startIndex < maxPagesCount)
            {
                //отрисовываем остатки
                @DrawPages(length - maxPagesCount, length, false, true);
            }
            else
            {
                if (startIndex > 1)
                {
                    //отрисовываем средний случай (2 /3/ 4 5)
                    @DrawPages(startIndex - 1, maxPagesCount + startIndex - 1, true, true);
                }
                else
                {
                    //отрисовываем стартовый случай (1 /2/ 3 4 или /1/ 2 3 4)
                    @DrawPages(0, maxPagesCount, true, false);
                }
            }
        }
        else
        {
            //отрисовываем меньше 5 страниц
            @DrawPages(0, length, false, false);
        }
    }
</div>


<script type="text/javascript">

    $(document).ready(function() {
        
        $('.pageNmbr, .paginationNavigationLink, .emploeeLink').on('click', function (e) {
            
            var currentPageItem = $(e.target);
            var url = currentPageItem.data('url');
            $('.progress').show();

            if (currentPageItem.hasClass('emploeeLink')) {
                ChangeSelectedPage(0);
            }

            if (currentPageItem.hasClass('emploeeLink')) {
                ClearTreeSelection();
                loadSearchPage(url);
            }
            else
                loadSearchPageResult(url);
        });

    });

</script>